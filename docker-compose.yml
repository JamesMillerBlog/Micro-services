version: "3"
services:

# LOADBALANCERS / REVERSE PROXIES
  http-load-balancer:
    build: ./web/load-balancers/http
    ports:
      - "80:80"
    depends_on:
      - app-load-balancer
      - api-gateway

  app-load-balancer:
    build: ./web/load-balancers/app
    depends_on:
      - home-app
      - admin-app

  api-gateway:
    build: ./web/load-balancers/api
    depends_on:
      - oauth-api

# APP SERVICES
  home-app:
    build: ./web/app-services/home/app
    volumes:
      - "./web/app-services/home/app:/usr/src/app"
    # env_file: .env
    command: gulp

  admin-app:
    build: ./web/app-services/admin/app
    volumes:
      - "./web/app-services/admin/app:/usr/src/app"
    # env_file: .env
    command: gulp
    # ports:
    #   - "4000:4000"


# BUSINESS SERVICES
  oauth-api:
    build: ./web/business-services/oauth/api
    volumes:
      - "./web/business-services/oauth/api:/usr/src/app"
    depends_on:
      - oauth-redis
      - accounts-api
    command: npm start

  oauth-redis:
    image: "redis:alpine"
    volumes:
      - "./web/business-services/oauth/redis/redis.conf:/usr/local/etc/redis/redis.conf"
    command: redis-server /usr/local/etc/redis/redis.conf


# DB SERVICES
  accounts-api:
    build: ./web/db-services/accounts/api
    volumes:
      - "./web/db-services/accounts/api:/usr/src/app"
    depends_on:
      - accounts-db
      - accounts-redis
    command: npm start
    # ports:
    #   - "3000:3000"

  accounts-db:
    image: mongo:latest
    volumes:
      - "./web/db-services/accounts/mongo/data/db:/data/db"
    env_file: ./web/db-services/accounts/mongo/.env

  accounts-redis:
    image: "redis:alpine"
    volumes:
      - "./web/db-services/accounts/redis/redis.conf:/usr/local/etc/redis/redis.conf"
    command: redis-server /usr/local/etc/redis/redis.conf


  # command: bash -c "npm update && npm install"
    

  # to start: docker-compose up

  # Docker Commands:
    # command: node ./dist/index.js
    # docker stop $(docker ps -a -q)
    # docker rm $(docker ps -a -q)
    # docker rmi $(docker images -a -q)